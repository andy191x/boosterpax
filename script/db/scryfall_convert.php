<?php

//
// Converts a scryfall json data blob (generated by scryfall_get) to the local database JSON format.
//

//
// Includes
//

require_once (__DIR__ . '/../../app/include.php');

//
// Script logic
//

exit(main($argv));

//
// Global routines
//

function usage()
{
    return basename(__FILE__) . ' <JSON_FILE>';
}

function main($argv)
{
    $json_file = isset_or_default($argv, 1, '');

    if (strlen($json_file) == 0)
    {
        echo errorJSON('Invalid JSON_FILE. Usage: ' . usage());
        return 1;
    }

    // Load data
    $json = file_get_contents($json_file);
    if ($json === false)
    {
        echo errorJSON('Cannot load JSON file.');
        return 1;
    }

    $data = json_decode($json, true);
    if ($data === false)
    {
        echo errorJSON('Invalid JSON data.');
        return 1;
    }

    if (!isset($data['set']) || !isset($data['card_array']))
    {
        echo errorJSON('Invalid JSON data format.');
        return 1;
    }

    // Parse set
    $local_set = array();
    $error = new ErrorType();
    if (!parseSet($data['set'], $error, $local_set))
    {
        echo errorJSON('Cannot parse set: ' . $error->getText());
        return 1;
    }

    // Parse card array
    $local_card_array = array();
    $card_index = 0;

    foreach ($data['card_array'] as $card)
    {
        $local_card = array();
        $error = new ErrorType();
        if (!parseCard($card, $error, $local_card))
        {
            echo errorJSON('Cannot parse card ' . $card_index . ': ' . $error->getText());
            return 1;
        }

        $local_card_array[] = $local_card;
        $card_index++;
    }

    // Perform additional sanity checks
    if ($local_set['card_count'] < 1)
    {
        echo errorJSON('No cards in this set.');
        return 1;
    }

    if (count($local_card_array) != $local_set['card_count'])
    {
        echo errorJSON('Card count of ' . count($local_card_array) . ' does not match set count of ' . $local_set['card_count'] . '.');
        return 1;
    }

    // Generate new doc
    $doc = array();
    $doc['set'] = $local_set;
    $doc['card_array'] = $local_card_array;

    echo json_encode($doc);

    return 0;
}

/**
 * @param mixed[] $set
 * @param ErrorType $out_error
 * @param mixed[] $out_local_set
 * @return bool
 */
function parseSet($set, &$out_error, &$out_local_set)
{
    $out_local_set = array();

    $required = array();
    $required[] = 'code';
    $required[] = 'name';
    $required[] = 'released_at';
    $required[] = 'card_count';

    foreach ($required as $req)
    {
        if (!isset($set[$req]))
        {
            $out_error = ErrorType::make(0, 'Missing field "' . $req . '".');
            return false;
        }

        $out_local_set[$req] = $set[$req];
    }

    return true;
}

/**
 * @param mixed[] $card
 * @param ErrorType $out_error
 * @param $out_local_card
 * @return bool
 */
function parseCard($card, &$out_error, &$out_local_card)
{
    $out_local_card = array();

    $required = array();
    $required[] = 'id';
    $required[] = 'name';
    $required[] = 'colors';
    $required[] = 'rarity';
    $required[] = 'cmc';
    $required[] = 'type_line';

    foreach ($required as $req)
    {
        if (!isset($card[$req]))
        {
            $out_error = ErrorType::make(0, 'Missing field "' . $req . '".');
            return false;
        }
    }

    $out_local_card['id'] = $card['id'];
    $out_local_card['name'] = $card['name'];
    $out_local_card['colors'] = implode(',', $card['colors']);
    $out_local_card['rarity'] = $card['rarity'];
    $out_local_card['cmc'] = $card['cmc'];
    $out_local_card['type'] = $card['type_line'];

    return true;
}

/**
 * @param string $text
 * @return string
 */
function errorJSON($text)
{
    $data = array();
    $data['error'] = $text;
    return json_encode($data);
}
