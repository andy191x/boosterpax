<?php

//
// Loads a scryfall json data blob (generated by scryfall_get) and downloads all of the images to a target folder.
// The target folder must not already exist.
//

//
// Includes
//

require_once (__DIR__ . '/../../app/include.php');

//
// Script logic
//

exit(main($argv));

//
// Global routines
//

function usage()
{
    return basename(__FILE__) . ' <JSON_FILE> <TARGET_FOLDER> [SIZE]';
}

function main($argv)
{
    $json_file = isset_or_default($argv, 1, '');
    $target_folder = isset_or_default($argv, 2, '');
    $size = isset_or_default($argv, 3, 'large');

    if (strlen($json_file) == 0)
    {
        l('Usage: ' . usage());
        l_error('Invalid JSON_FILE.');
        return 1;
    }
    if (strlen($target_folder) < 2)
    {
        l('Usage: ' . usage());
        l_error('Invalid TARGET_FOLDER.');
        return 1;
    }
    if (strlen($size) == 0)
    {
        l('Usage: ' . usage());
        l_error('Invalid SIZE.');
        return 1;
    }

    // Load data
    l('Loading JSON file...');

    $json = file_get_contents($json_file);
    if ($json === false)
    {
        l_error('Cannot load JSON file.');
        return 1;
    }

    $data = json_decode($json, true);
    if ($data === false)
    {
        l_error('Invalid JSON data.');
        return 1;
    }

    if (!isset($data['set']) || !isset($data['card_array']))
    {
        l_error('Invalid JSON data format.');
        return 1;
    }

    // Make folder
    l('Creating folder...');

    $folder = join_path($target_folder, $size, '/');

    if (file_exists($folder))
    {
        l_error('Target folder already exists (' . $folder .').');
        return 1;
    }

    @mkdir($folder, 0777, true);

    if (!file_exists($folder))
    {
        l_error('Cannot create target folder (' . $folder . ').');
        return 1;
    }

    // Download cards
    foreach ($data['card_array'] as $card)
    {
        l($card['name'] . ' (' . $card['id'] . ') ...');

        $image_url = '';
        $ext = '';
        if (isset($card['image_uris'][$size]))
        {
            $image_url = $card['image_uris'][$size];
            if (!preg_match('/^http/', $image_url))
            {
                l_error('No matching download URL.');
                return 1;
            }

            if (preg_match('/.jpg/', $image_url))
            {
                $ext = '.jpg';
            }
            else if (preg_match('/.png/', $image_url))
            {
                $ext = '.png';
            }
            else
            {
                l_error('Unsupported image format.');
                return 1;
            }
        }

        $file = join_path($folder, $card['id'] . $ext, '/');
        @unlink($file);

        $error = new ErrorType();
        if (!scryfallImageDownload($image_url, $file, $error))
        {
            l_error('Download failed: ' . $error->getText());
            return 1;
        }
    }

    l('done.');
    return 0;
}

function l($text)
{
    echo $text . PHP_EOL;
}

function l_error($text)
{
    echo 'ERROR: ' . $text . PHP_EOL;
}

/**
 * @param string $url
 * @param string $file
 * @param ErrorType $out_error
 * @param int $timeout_ms
 * @return bool
 */
function scryfallImageDownload($url, $file, &$out_error, $timeout_ms = 15000)
{
    $out_error = new ErrorType();

    $fp = fopen($file, 'w+');
    if ($fp === false)
    {
        $out_error = ErrorType::make(0, 'Cannot open file for writing.');
        return false;
    }

    // Configure curl
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4); // v4 only
    curl_setopt($ch, CURLOPT_POST, 0);
    //curl_setopt($ch, CURLOPT_POSTFIELDS, $field_map);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_FILE, $fp);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    if ($timeout_ms != 0)
    {
        curl_setopt($ch, CURLOPT_TIMEOUT_MS, $timeout_ms);
    }

    // Send request
    $cr = curl_exec($ch);
    $curl_data = array();

    if ($cr !== false)
    {
        $curl_data['httpcode'] = (int)curl_getinfo($ch, CURLINFO_HTTP_CODE);
    }
    else
    {
        $curl_data['errno'] = curl_errno($ch);
        $curl_data['error'] = curl_error($ch);
    }

    // Cleanup
    curl_close($ch);
    $ch = null;

    fclose($fp);
    $fp = null;

    if ($cr === false)
    {
        $out_error = ErrorType::make(0, 'HTTP call failed.');
        return false;
    }

    // Respect scryfall's rate limits
    usleep(1000 * 250);

    return true;
}
